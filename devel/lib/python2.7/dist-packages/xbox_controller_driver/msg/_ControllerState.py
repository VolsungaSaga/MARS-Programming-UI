# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from xbox_controller_driver/ControllerState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class ControllerState(genpy.Message):
  _md5sum = "4c31c26381776898087933af6bf1ba7e"
  _type = "xbox_controller_driver/ControllerState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Header Header

int16 leftY
int16 rightY

int16 A
int16 B
int16 X
int16 Y 
int16 back
int16 start
int16 guide
int16 leftBumper
int16 rightBumper


float32 leftTrigger
float32 rightTrigger

float32 normalizeRightY
float32 normalizeLeftY

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['Header','leftY','rightY','A','B','X','Y','back','start','guide','leftBumper','rightBumper','leftTrigger','rightTrigger','normalizeRightY','normalizeLeftY']
  _slot_types = ['std_msgs/Header','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Header,leftY,rightY,A,B,X,Y,back,start,guide,leftBumper,rightBumper,leftTrigger,rightTrigger,normalizeRightY,normalizeLeftY

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ControllerState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Header is None:
        self.Header = std_msgs.msg.Header()
      if self.leftY is None:
        self.leftY = 0
      if self.rightY is None:
        self.rightY = 0
      if self.A is None:
        self.A = 0
      if self.B is None:
        self.B = 0
      if self.X is None:
        self.X = 0
      if self.Y is None:
        self.Y = 0
      if self.back is None:
        self.back = 0
      if self.start is None:
        self.start = 0
      if self.guide is None:
        self.guide = 0
      if self.leftBumper is None:
        self.leftBumper = 0
      if self.rightBumper is None:
        self.rightBumper = 0
      if self.leftTrigger is None:
        self.leftTrigger = 0.
      if self.rightTrigger is None:
        self.rightTrigger = 0.
      if self.normalizeRightY is None:
        self.normalizeRightY = 0.
      if self.normalizeLeftY is None:
        self.normalizeLeftY = 0.
    else:
      self.Header = std_msgs.msg.Header()
      self.leftY = 0
      self.rightY = 0
      self.A = 0
      self.B = 0
      self.X = 0
      self.Y = 0
      self.back = 0
      self.start = 0
      self.guide = 0
      self.leftBumper = 0
      self.rightBumper = 0
      self.leftTrigger = 0.
      self.rightTrigger = 0.
      self.normalizeRightY = 0.
      self.normalizeLeftY = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.Header.seq, _x.Header.stamp.secs, _x.Header.stamp.nsecs))
      _x = self.Header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_11h4f().pack(_x.leftY, _x.rightY, _x.A, _x.B, _x.X, _x.Y, _x.back, _x.start, _x.guide, _x.leftBumper, _x.rightBumper, _x.leftTrigger, _x.rightTrigger, _x.normalizeRightY, _x.normalizeLeftY))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.Header is None:
        self.Header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.Header.seq, _x.Header.stamp.secs, _x.Header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Header.frame_id = str[start:end].decode('utf-8')
      else:
        self.Header.frame_id = str[start:end]
      _x = self
      start = end
      end += 38
      (_x.leftY, _x.rightY, _x.A, _x.B, _x.X, _x.Y, _x.back, _x.start, _x.guide, _x.leftBumper, _x.rightBumper, _x.leftTrigger, _x.rightTrigger, _x.normalizeRightY, _x.normalizeLeftY,) = _get_struct_11h4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.Header.seq, _x.Header.stamp.secs, _x.Header.stamp.nsecs))
      _x = self.Header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_11h4f().pack(_x.leftY, _x.rightY, _x.A, _x.B, _x.X, _x.Y, _x.back, _x.start, _x.guide, _x.leftBumper, _x.rightBumper, _x.leftTrigger, _x.rightTrigger, _x.normalizeRightY, _x.normalizeLeftY))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.Header is None:
        self.Header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.Header.seq, _x.Header.stamp.secs, _x.Header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Header.frame_id = str[start:end].decode('utf-8')
      else:
        self.Header.frame_id = str[start:end]
      _x = self
      start = end
      end += 38
      (_x.leftY, _x.rightY, _x.A, _x.B, _x.X, _x.Y, _x.back, _x.start, _x.guide, _x.leftBumper, _x.rightBumper, _x.leftTrigger, _x.rightTrigger, _x.normalizeRightY, _x.normalizeLeftY,) = _get_struct_11h4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_11h4f = None
def _get_struct_11h4f():
    global _struct_11h4f
    if _struct_11h4f is None:
        _struct_11h4f = struct.Struct("<11h4f")
    return _struct_11h4f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I

// Generated by gencpp from file xbox_controller_driver/ControllerState.msg
// DO NOT EDIT!


#ifndef XBOX_CONTROLLER_DRIVER_MESSAGE_CONTROLLERSTATE_H
#define XBOX_CONTROLLER_DRIVER_MESSAGE_CONTROLLERSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace xbox_controller_driver
{
template <class ContainerAllocator>
struct ControllerState_
{
  typedef ControllerState_<ContainerAllocator> Type;

  ControllerState_()
    : Header()
    , leftY(0)
    , rightY(0)
    , A(0)
    , B(0)
    , X(0)
    , Y(0)
    , back(0)
    , start(0)
    , guide(0)
    , leftBumper(0)
    , rightBumper(0)
    , leftTrigger(0.0)
    , rightTrigger(0.0)
    , normalizeRightY(0.0)
    , normalizeLeftY(0.0)  {
    }
  ControllerState_(const ContainerAllocator& _alloc)
    : Header(_alloc)
    , leftY(0)
    , rightY(0)
    , A(0)
    , B(0)
    , X(0)
    , Y(0)
    , back(0)
    , start(0)
    , guide(0)
    , leftBumper(0)
    , rightBumper(0)
    , leftTrigger(0.0)
    , rightTrigger(0.0)
    , normalizeRightY(0.0)
    , normalizeLeftY(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _Header_type;
  _Header_type Header;

   typedef int16_t _leftY_type;
  _leftY_type leftY;

   typedef int16_t _rightY_type;
  _rightY_type rightY;

   typedef int16_t _A_type;
  _A_type A;

   typedef int16_t _B_type;
  _B_type B;

   typedef int16_t _X_type;
  _X_type X;

   typedef int16_t _Y_type;
  _Y_type Y;

   typedef int16_t _back_type;
  _back_type back;

   typedef int16_t _start_type;
  _start_type start;

   typedef int16_t _guide_type;
  _guide_type guide;

   typedef int16_t _leftBumper_type;
  _leftBumper_type leftBumper;

   typedef int16_t _rightBumper_type;
  _rightBumper_type rightBumper;

   typedef float _leftTrigger_type;
  _leftTrigger_type leftTrigger;

   typedef float _rightTrigger_type;
  _rightTrigger_type rightTrigger;

   typedef float _normalizeRightY_type;
  _normalizeRightY_type normalizeRightY;

   typedef float _normalizeLeftY_type;
  _normalizeLeftY_type normalizeLeftY;





  typedef boost::shared_ptr< ::xbox_controller_driver::ControllerState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xbox_controller_driver::ControllerState_<ContainerAllocator> const> ConstPtr;

}; // struct ControllerState_

typedef ::xbox_controller_driver::ControllerState_<std::allocator<void> > ControllerState;

typedef boost::shared_ptr< ::xbox_controller_driver::ControllerState > ControllerStatePtr;
typedef boost::shared_ptr< ::xbox_controller_driver::ControllerState const> ControllerStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xbox_controller_driver::ControllerState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xbox_controller_driver::ControllerState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace xbox_controller_driver

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'xbox_controller_driver': ['/home/david/git clones/MARS-Programming-UI/src/xbox_controller_driver/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::xbox_controller_driver::ControllerState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xbox_controller_driver::ControllerState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xbox_controller_driver::ControllerState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xbox_controller_driver::ControllerState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xbox_controller_driver::ControllerState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xbox_controller_driver::ControllerState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xbox_controller_driver::ControllerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4c31c26381776898087933af6bf1ba7e";
  }

  static const char* value(const ::xbox_controller_driver::ControllerState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4c31c26381776898ULL;
  static const uint64_t static_value2 = 0x087933af6bf1ba7eULL;
};

template<class ContainerAllocator>
struct DataType< ::xbox_controller_driver::ControllerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xbox_controller_driver/ControllerState";
  }

  static const char* value(const ::xbox_controller_driver::ControllerState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xbox_controller_driver::ControllerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header Header\n\
\n\
int16 leftY\n\
int16 rightY\n\
\n\
int16 A\n\
int16 B\n\
int16 X\n\
int16 Y \n\
int16 back\n\
int16 start\n\
int16 guide\n\
int16 leftBumper\n\
int16 rightBumper\n\
\n\
\n\
float32 leftTrigger\n\
float32 rightTrigger\n\
\n\
float32 normalizeRightY\n\
float32 normalizeLeftY\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::xbox_controller_driver::ControllerState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xbox_controller_driver::ControllerState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Header);
      stream.next(m.leftY);
      stream.next(m.rightY);
      stream.next(m.A);
      stream.next(m.B);
      stream.next(m.X);
      stream.next(m.Y);
      stream.next(m.back);
      stream.next(m.start);
      stream.next(m.guide);
      stream.next(m.leftBumper);
      stream.next(m.rightBumper);
      stream.next(m.leftTrigger);
      stream.next(m.rightTrigger);
      stream.next(m.normalizeRightY);
      stream.next(m.normalizeLeftY);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControllerState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xbox_controller_driver::ControllerState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xbox_controller_driver::ControllerState_<ContainerAllocator>& v)
  {
    s << indent << "Header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.Header);
    s << indent << "leftY: ";
    Printer<int16_t>::stream(s, indent + "  ", v.leftY);
    s << indent << "rightY: ";
    Printer<int16_t>::stream(s, indent + "  ", v.rightY);
    s << indent << "A: ";
    Printer<int16_t>::stream(s, indent + "  ", v.A);
    s << indent << "B: ";
    Printer<int16_t>::stream(s, indent + "  ", v.B);
    s << indent << "X: ";
    Printer<int16_t>::stream(s, indent + "  ", v.X);
    s << indent << "Y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Y);
    s << indent << "back: ";
    Printer<int16_t>::stream(s, indent + "  ", v.back);
    s << indent << "start: ";
    Printer<int16_t>::stream(s, indent + "  ", v.start);
    s << indent << "guide: ";
    Printer<int16_t>::stream(s, indent + "  ", v.guide);
    s << indent << "leftBumper: ";
    Printer<int16_t>::stream(s, indent + "  ", v.leftBumper);
    s << indent << "rightBumper: ";
    Printer<int16_t>::stream(s, indent + "  ", v.rightBumper);
    s << indent << "leftTrigger: ";
    Printer<float>::stream(s, indent + "  ", v.leftTrigger);
    s << indent << "rightTrigger: ";
    Printer<float>::stream(s, indent + "  ", v.rightTrigger);
    s << indent << "normalizeRightY: ";
    Printer<float>::stream(s, indent + "  ", v.normalizeRightY);
    s << indent << "normalizeLeftY: ";
    Printer<float>::stream(s, indent + "  ", v.normalizeLeftY);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XBOX_CONTROLLER_DRIVER_MESSAGE_CONTROLLERSTATE_H
